//https://leetcode.com/problems/check-completeness-of-a-binary-tree/submissions/915841266/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        int lastLevel = 0;
        int curLevel = -1;
        bool prevLevelFull = true;
        bool curLevelFull = true;
        int sz = -1;
        while(!q.empty()){
            ++curLevel;

            if(!prevLevelFull){
                //printf("\nPrevious level not full when moving to next level. size %d, expected %d\n", sz, (int)round(pow(2,curLevel)));
                return false;
            }
            sz=q.size();
            //printf("\nCur size %d\n", sz);

            prevLevelFull = curLevelFull; //((int)round(pow(2,curLevel)) == sz);
            curLevelFull = true;

            while(sz--){
                TreeNode* f=q.front();
                //printf("Popping %d, ", f->val);
                q.pop();
                if(f->left){
                    if(!curLevelFull){
                        //printf("Level %d not left-shifted. %d missing left child.", f->val);
                        return false;
                    }
                    q.push(f->left);
                    //printf("Pushing %d, ", f->left->val);
                }
                else{
                    //printf("Level %d not full, missing left. ", curLevel);
                    curLevelFull = false;
                }
                if(f->right){
                    if(!curLevelFull){
                        //printf("Level %d not left-shifted. %d missing right child.", f->val);
                        return false;
                    }
                    q.push(f->right);
                    //printf("Pushing %d, ", f->right->val);
                }
                else{
                    //printf("Level %d not full, missing right. ", curLevel);
                    curLevelFull = false;
                }
            }
        }
        return true;
    }
};