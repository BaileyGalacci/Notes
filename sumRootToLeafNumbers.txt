//https://leetcode.com/problems/sum-root-to-leaf-numbers/submissions/915180983/
// Had a !! 0 ms !! runtime. Super efficient I suppose. 
// I went with O(nlog(n)) multiplies instead of O(n) divides.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> nodePathVals = {};
    int depthFirstSearch(TreeNode* head){
        int retVal = 0;
        if(head->left){
            nodePathVals.push_back(head->left->val);
            retVal += depthFirstSearch(head->left);
        }
        if(head->right){
            nodePathVals.push_back(head->right->val);
            retVal += depthFirstSearch(head->right);
        }

        // found a leaf
        if(!head->left && !head->right){
            for(int i=0; i<nodePathVals.size(); ++i){
                retVal *= 10;
                retVal += nodePathVals[i];
            }
            //printf("Adding %d\n", retVal);
            nodePathVals.pop_back();
        }
        else{
            // ensure vals are popped as we move back up the tree
            nodePathVals.pop_back();
        }

        return retVal;
    }

    int sumNumbers(TreeNode* root) {
        // all vals are constrained between 0 and 9, so they are digits in a number for each power of 10
        int sum=0;
        int tmpSum=root->val;
        nodePathVals.push_back(root->val);
        return depthFirstSearch(root);
    }
};