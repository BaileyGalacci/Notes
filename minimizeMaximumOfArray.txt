//https://leetcode.com/problems/minimize-maximum-of-array/submissions/928676642/

class Solution {
public:
    int minimizeArrayValue(vector<int>& nums) {
        // weights can be shifted left, but not right.
        // ex: 1,3,1,10
        // separate the vector into subvectors, where a new subvector is created whenever the value decreases (reading l>r)

        // [1,3],1,10

        // balance the current subvector, by taking the average and rounding up

        // effectively: [2,2],1,10

        // cache the average, rounded up. (2). Replace with new average if higher. 

        // continue

        // find the highest average, return that

        double sum=0.0;
        int highestAverage=0;
        //int tmpAvg=0;

        for(int i=0; i<nums.size(); ++i) {
            sum+=nums[i];
            //tmpAvg = (sum/(i+1)) + ((sum%(i+1)) ? 1 : 0); // this solution doesn't require a double, but fails for large arrays/numbers
            //tmpAvg = ceil(sum/(i+1));
            highestAverage = max(highestAverage, (int)ceil(sum/(i+1)));
        }

        return highestAverage;
    }
};
