//Understand common algorithms. i.e. traversals, divide and conquer, when to use breadth first vs. depth first recursion. 
//Discuss runtimes, theoretical limitations, and basic implementation strategies for different cases of algorithms.

// Depth first search
#include <utility> // pair
#include <vector>  // vect
#include <tuple>   // tuple
#include <limits.h> // INT_MAX

typedef std::pair<*Vertex, int> edge;

class Vertex
{
private:
    
public:
    std::vector<edge> edges = {};
    bool isChecked = false;
    int dist = INT_MAX;

    Vertex(){};
    ~Vertex(){};

    void addEdge(*Vertex vp, int dist)
    {
        edges.push_back(std::make_pair(vp, dist));
    }

};

std::map<Vertex> makeGraphMap(const int numVerts, const std::vector<std:vector<int>> &edges_in, const bool twoWay=true, std::vector<bool> &hasApple)
{
    std::map<int, Vertex> graph;
    for(int i=0; i<hasApple.size(); i++)
    {
        graph[i] = Vertex(hasApple[i]);
    }

    for(int i=0; i<edges_in.size(); i++)
    {
        graph[edges_in[i][0]].addEdge(&graph[edges_in[i][1]]);

        if(twoWay)
            graph[edges_in[i][1]].addEdge(&graph[edges_in[i][0]]);
    }
    return graph;
}

std::vector<Vertex> makeGraph(const int numVerts, const std::vector<std:vector<int>> &edges_in, const bool twoWay=true)
{
    std::vector<Vertex> graph(numVerts);
    for(int i=0; i<edges_in.size(); i++)
    {
	//TODO: make sure edges don't point a vector to themselves
        graph[edges_in[i][0]].addEdge(&graph[edges_in[i][1]]);

        if(twoWay)
            graph[edges_in[i][1]].addEdge(&graph[edges_in[i][0]]);
    }
    return graph;
}


//std::vector<Vertex> makeGraph(int numVerts, std::vector<int> inv1, std::vector<int> inv2, std::vector<int> ind)
std::vector<Vertex> makeGraph(const int numVerts, const std::vector<std::tuple<int, int, int>> &edges_in, const bool twoWay=true)
{
    // create numVerts vertices
    std::vector<Vertex> graph(numVerts);
    for(int i=0; i<edges_in.size(); i++)
    {
        //TODO: make sure edges don't point a vector to themselves
        graph[std::get<0>(edges_in[i])].edges.addEdge(&graph[std::get<1>(edges_in[i])], std::get<2>(edges_in[i]));

        // make edges 2 way by adding the edge to the second vertex as well
	if(twoWay)
            graph[std::get<1>(edges_in[i])].edges.addEdge(&graph[std::get<0>(edges_in[i])], std::get<2>(edges_in[i]));
    }
    return graph;
}

void diveIn(Vertex *v, bool shouldMark=true)
{
    if(shouldMark) v->isChecked = true;

    // check through each edge, call recursively if destination is not yet checked
    for(int i=0; i<v->edges.size(); i++)
    {
        if(! v->edges[i].first->isChecked)
	{
	    diveIn(v->edges[i].first, shouldMark);
	}
    }
}

int countGroups(std::vector<Vertex> &graph)
{
    // figure out how many separate groups there are
    int numGroups{0};
    for(int i=0; i<numVerts; i++)
    {
        if(!graph[i].isChecked)
	{
	    diveIn(&graph[i]);
	    numGroups++;
	}
    }

    return numGroups;
}


// greedy depth first, or non-greedy depth first
int findShortestDistance(Vertex* src, Vertex* dst)
{
    // construct a table of the shortest value found so far to get from src to each other vertex
    // src to itself is distance 0;
    src->dist = 0;

    vector<Vertex*> vStack = {src};
    vector<int> eCounter = {0};
    
    while(vStack.size()>0) //for(int i=0; i<src.edges.size(); i++)
    {
	vStack.back->isChecked = true;

	// does this vertex have an edge to check?
	if(eCounter.back >= vStack.back->edges.size())
	{
	    vStack.pop_back();
	    eCounter.pop_back();
	}	

	auto tmp = vStack.back->edges[eCounter.back];  // temporary holder for edge to consider

	//  add distance to here plus distance to dest, compare against existing value and update if shorter
	if(vStack.back->dist + tmp.second < tmp.first->dist)
	{
		tmp.first->dist = vStack.back->dist + tmp.second;

		// we found a shorter path! we may need to recalculate options from this vertex, which were done with a suboptimal base distance
		// this line changes the algorithm to no longer be greedy, and increases worst case from O(n) to O(n^2), where n is number of edges. Best case still O(n).
		tmp.first->isChecked = false;
	}

	// done checking this edge, increment counter
	eCounter.back++;

	// dive into that dest if it has not yet been checked
	if(!tmp.first->isChecked)
	{
	    // add Vertex to stack, and an edge counter
	    vStack.push_back(tmp.first);
	    eCounter.push_back(0);
	}
    }
    
    return dst->dist;
}

void printDists(const std::Vector<Vertex> &graph)
{
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < graph.size(); i++)
    {
        printf("%d: \t\t%d\n",graph[i].dist);
    }
}

Vertex* minDist(const std::Vector<Vertex> &graph)
{
    Vertex* retVal = nullptr;
    for (int i = 0; i < graph.size(); i++)
    {
	if(!graph[i].isChecked && (retVal == nullptr || graph[i].dist < retVal->dist))
	{
	    retVal = &(graph[i]);
	}
    }
    
    return retVal;
}

void dijksta(std::Vector<Vertex> &graph, Vertex* src, Vertex* dst)
{
    src->dist = 0;
    // Find shortest path for all vertices
    for (int count = 0; count < graph.size() - 1; count++) 
    {
        //calling minDistance to pick next vertex
        Vertex* u = minDist(graph);
 
        // Mark the picked vertex as visited
        u->isChecked = true;

        if (u->dist == INT_MAX)
	{ // no more vertices are reachable
            break;
	}

        //Relaxing all neighbours of U
        for (int v = 0; v < u->edges.size(); v++)
        {
	    edge tmp = u->edges[v]
	    tmp.first->dist = min(tmp.first->dist, u->dist + tmp.second);
	}
    }

    printDists(graph);
}

int main(void)
{
    int numVerts = 4;
    std::vector<std::tuple<int, int, int>> edges_in = 
	{ {0,1,1},
	  {0,2,1},
	  {2,3,3},
	  {3,0,4},
	  {1,2,2}
	};
    //std::vector<int> inv1 = {1,1,3,4,2};
    //std::vector<int> inv2 = {2,3,4,1,3};
    //std::vector<int> ind  = {1,1,3,5,2};

    //std::vector<Vertex> graph = makeGraph(numVerts, inv1, inv2, ind);
    std::vector<Vertex> graph = makeGraph(numVerts, edges_in);

    

    return 0;
}